---
apiVersion: v1
kind: ConfigMap
metadata:
  name: zookeeper-sh
data:
  start-zookeeper.sh: |+
    #!/usr/bin/env bash

    USER=`whoami`
    HOST=`hostname -s`
    DOMAIN=`hostname -d`
    LOG_LEVEL=INFO
    DATA_DIR="/var/lib/zookeeper/data"
    DATA_LOG_DIR="/var/lib/zookeeper/log"
    LOG_DIR="/var/log/zookeeper"
    CONF_DIR="/conf"
    ZOO_CFG_TEMPLATE="/conf/zoo-cfg.template"
    SERVER_PORT=2888
    ELECTION_PORT=3888
    HEAP=2G
    SERVERS=1

    function print_usage() {
    echo "\
    Usage: start-zookeeper [OPTIONS]
    Starts a ZooKeeper server based on the supplied options.
        --servers           The number of servers in the ensemble. The default
                            value is 1.

        --data_dir          The directory where the ZooKeeper process will store its
                            snapshots. The default is /var/lib/zookeeper/data.

        --data_log_dir      The directory where the ZooKeeper process will store its
                            write ahead log. The default is
                            /var/lib/zookeeper/data/log.

        --conf_dir          The directoyr where the ZooKeeper process will store its
                            configuration. The default is /conf.

        --election_port     The port on which the ZooKeeper process will perform
                            leader election. The default is 3888.

        --server_port       The port on which the ZooKeeper process will listen for
                            requests from other servers in the ensemble. The
                            default is 2888.

        --heap              The maximum amount of heap to use. The format is the
                            same as that used for the Xmx and Xms parameters to the
                            JVM. e.g. --heap=2G. The default is 2G.

        --log_level         The log level for the zookeeeper server. Either FATAL,
                            ERROR, WARN, INFO, DEBUG. The default is INFO.
    "
    }

    function create_data_dirs() {
        if [ ! -d $DATA_DIR  ]; then
            mkdir -p $DATA_DIR
            chown -R $USER:$USER $DATA_DIR
        fi

        if [ ! -d $DATA_LOG_DIR  ]; then
            mkdir -p $DATA_LOG_DIR
            chown -R $USER:USER $DATA_LOG_DIR
        fi

        if [ ! -d $LOG_DIR  ]; then
            mkdir -p $LOG_DIR
            chown -R $USER:$USER $LOG_DIR
        fi
        if [ ! -f $ID_FILE ] && [ $SERVERS -gt 1 ]; then
            echo $MY_ID >> $ID_FILE
        fi
    }

    function print_servers() {
        for (( i=1; i<=$SERVERS; i++ ))
        do
            echo "server.$i=$NAME-$((i-1)).$DOMAIN:$SERVER_PORT:$ELECTION_PORT"
        done
    }

    function create_config() {
        rm -f $CONFIG_FILE
        
        echo "#This file was autogenerated DO NOT EDIT" > $CONFIG_FILE
        cat ${ZOO_CFG_TEMPLATE} >> $CONFIG_FILE

        if [ $SERVERS -gt 1 ]; then
            print_servers >> $CONFIG_FILE
        fi
        cat $CONFIG_FILE >&2
    }

    function create_jvm_props() {
        rm -f $JAVA_ENV_FILE
        echo "ZOO_LOG_DIR=$LOG_DIR" >> $JAVA_ENV_FILE
        echo "JVMFLAGS=\"-Xmx$HEAP -Xms$HEAP\"" >> $JAVA_ENV_FILE
    }

    function create_log_props() {
        rm -f $LOGGER_PROPS_FILE
        echo "Creating ZooKeeper log4j configuration"
        echo "zookeeper.root.logger=CONSOLE" >> $LOGGER_PROPS_FILE
        echo "zookeeper.console.threshold="$LOG_LEVEL >> $LOGGER_PROPS_FILE
        echo "log4j.rootLogger=\${zookeeper.root.logger}" >> $LOGGER_PROPS_FILE
        echo "log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender" >> $LOGGER_PROPS_FILE
        echo "log4j.appender.CONSOLE.Threshold=\${zookeeper.console.threshold}" >> $LOGGER_PROPS_FILE
        echo "log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout" >> $LOGGER_PROPS_FILE
        echo "log4j.appender.CONSOLE.layout.ConversionPattern=%d{ISO8601} [myid:%X{myid}] - %-5p [%t:%C{1}@%L] - %m%n" >> $LOGGER_PROPS_FILE
    }

    optspec=":hv-:"
    while getopts "$optspec" optchar; do

        case "${optchar}" in
            -)
                case "${OPTARG}" in
                    servers=*)
                        SERVERS=${OPTARG##*=}
                        ;;
                    data_dir=*)
                        DATA_DIR=${OPTARG##*=}
                        ;;
                    data_log_dir=*)
                        DATA_LOG_DIR=${OPTARG##*=}
                        ;;
                    log_dir=*)
                        LOG_DIR=${OPTARG##*=}
                        ;;
                    conf_dir=*)
                        CONF_DIR=${OPTARG##*=}
                        ;;
                    election_port=*)
                        ELECTION_PORT=${OPTARG##*=}
                        ;;
                    server_port=*)
                        SERVER_PORT=${OPTARG##*=}
                        ;;
                    heap=*)
                        HEAP=${OPTARG##*=}
                        ;;
                    log_level=*)
                        LOG_LEVEL=${OPTARG##*=}
                        ;;
                    *)
                        echo "Unknown option --${OPTARG}" >&2
                        exit 1
                        ;;
                esac;;
            h)
                print_usage
                exit
                ;;
            v)
                echo "Parsing option: '-${optchar}'" >&2
                ;;
            *)
                if [ "$OPTERR" != 1 ] || [ "${optspec:0:1}" = ":" ]; then
                    echo "Non-option argument: '-${OPTARG}'" >&2
                fi
                ;;
        esac
    done

    ID_FILE="$DATA_DIR/myid"
    CONFIG_FILE="$CONF_DIR/zoo.cfg"
    LOGGER_PROPS_FILE="$CONF_DIR/log4j.properties"
    JAVA_ENV_FILE="$CONF_DIR/java.env"
    if [[ $HOST =~ (.*)-([0-9]+)$ ]]; then
        NAME=${BASH_REMATCH[1]}
        ORD=${BASH_REMATCH[2]}
    else
        echo "Fialed to parse name and ordinal of Pod"
        exit 1
    fi

    MY_ID=$((ORD+1))

    create_config && create_jvm_props && create_log_props && create_data_dirs && exec zkServer.sh start-foreground

  zookeeper-ready.sh: |+
    #!/usr/bin/env bash

    OK=$(echo ruok | nc 127.0.0.1 $1)
    if [[ "$OK" == "imok" ]]; then
        exit 0
    else
        exit 1
    fi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: zookeeper-cfg
data:
  zoo-cfg.template: |+
    clientPort=2181
    dataDir=/var/lib/zookeeper/data
    dataLogDir=/var/lib/zookeeper/data/log
    tickTime=2000
    initLimit=10
    syncLimit=5
    maxClientCnxns=60
    minSessionTimeout=4000
    maxSessionTimeout=40000
    autopurge.snapRetainCount=3
    autopurge.purgeInteval=12
    4lw.commands.whitelist=stat, ruok, conf, isro
---
apiVersion: v1
kind: Service
metadata:
  name: zk-hs
  labels:
    app: zk
spec:
  ports:
  - port: 2888
    name: server
  - port: 3888
    name: leader-election
  clusterIP: None
  selector:
    app: zk

---
apiVersion: v1
kind: Service
metadata:
  name: zk-cs
  labels:
    app: zk
spec:
  ports:
  - port: 2181
    name: client
  selector:
    app: zk

---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: zk-pdb
spec:
  selector:
    matchLabels:
      app: zk
  maxUnavailable: 1

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: zk
spec:
  selector:
    matchLabels:
      app: zk
  serviceName: zk-hs
  replicas: 3
  updateStrategy:
    type: RollingUpdate
  podManagementPolicy: Parallel
  template:
    metadata:
      labels:
        app: zk
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchExpressions:
                  - key: "app"
                    operator: In
                    values:
                    - zk
              topologyKey: "kubernetes.io/hostname"
      containers:
      - name: zookeeper
        imagePullPolicy: IfNotPresent
        image: "zookeeper:3.5.6"
        resources:
          requests:
            memory: "1Gi"
            cpu: "0.5"
        ports:
        - containerPort: 2181
          name: client
        - containerPort: 2888
          name: server
        - containerPort: 3888
          name: leader-election
        command:
        - sh
        - -c
        - "start-zookeeper.sh \
          --servers=3 \
          --data_dir=/var/lib/zookeeper/data \
          --data_log_dir=/var/lib/zookeeper/data/log \
          --election_port=3888 \
          --server_port=2888 \
          --heap=512M \
          --log_level=INFO"
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - "zookeeper-ready.sh 2181"
          initialDelaySeconds: 10
          timeoutSeconds: 5
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - "zookeeper-ready.sh 2181"
          initialDelaySeconds: 10
          timeoutSeconds: 5
        volumeMounts:
        - name: datadir
          mountPath: /var/lib/zookeeper
        - name: zookeeper-sh
          mountPath: /usr/local/bin/start-zookeeper.sh
          subPath: start-zookeeper.sh
        - name: zookeeper-sh
          mountPath: /usr/local/bin/zookeeper-ready.sh
          subPath: zookeeper-ready.sh
        - name: zookeeper-cfg
          mountPath: /conf/zoo-cfg.template
          subPath: zoo-cfg.template
      securityContext:
        runAsUser: 1000
        fsGroup: 1000
      volumes:
      - name: zookeeper-sh
        configMap:
          name: zookeeper-sh
          defaultMode: 0755
      - name: zookeeper-cfg
        configMap:
          name: zookeeper-cfg
  volumeClaimTemplates:
  - metadata:
      name: datadir
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi